const std = @import("std");
const tif = @import("tiny_image_format");

pub const Type = enum(u32) {
    COMPRESSED = 0x0,
    BYTE = 0x1400,
    UNSIGNED_BYTE = 0x1401,
    SHORT = 0x1402,
    UNSIGNED_SHORT = 0x1403,
    INT = 0x1404,
    UNSIGNED_INT = 0x1405,
    FLOAT = 0x1406,
    DOUBLE = 0x140A,
    HALF_FLOAT = 0x140B,
    UNSIGNED_BYTE_3_3_2 = 0x8032,
    UNSIGNED_SHORT_4_4_4_4 = 0x8033,
    UNSIGNED_SHORT_5_5_5_1 = 0x8034,
    UNSIGNED_INT_8_8_8_8 = 0x8035,
    UNSIGNED_INT_10_10_10_2 = 0x8036,
    UNSIGNED_BYTE_2_3_3_REV = 0x8362,
    UNSIGNED_SHORT_5_6_5 = 0x8363,
    UNSIGNED_SHORT_5_6_5_REV = 0x8364,
    UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
    UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
    UNSIGNED_INT_8_8_8_8_REV = 0x8367,
    UNSIGNED_INT_2_10_10_10_REV = 0x8368,
    UNSIGNED_INT_24_8 = 0x84FA,
    UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
    UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
    _,
};

pub const GlFormat = enum(u32) {
    RED = 0x1903,
    GREEN = 0x1904,
    BLUE = 0x1905,
    ALPHA = 0x1906,
    RGB = 0x1907,
    RGBA = 0x1908,
    LUMINANCE = 0x1909,
    LUMINANCE_ALPHA = 0x190A,
    ABGR = 0x8000,
    INTENSITY = 0x8049,
    BGR = 0x80E0,
    BGRA = 0x80E1,
    RG = 0x8227,
    RG_INTEGER = 0x8228,
    SRGB = 0x8C40,
    SRGB_ALPHA = 0x8C42,
    SLUMINANCE_ALPHA = 0x8C44,
    SLUMINANCE = 0x8C46,
    RED_INTEGER = 0x8D94,
    GREEN_INTEGER = 0x8D95,
    BLUE_INTEGER = 0x8D96,
    ALPHA_INTEGER = 0x8D97,
    RGB_INTEGER = 0x8D98,
    RGBA_INTEGER = 0x8D99,
    BGR_INTEGER = 0x8D9A,
    BGRA_INTEGER = 0x8D9B,
    RED_SNORM = 0x8F90,
    RG_SNORM = 0x8F91,
    RGB_SNORM = 0x8F92,
    RGBA_SNORM = 0x8F93,
    _,
};

pub const IntFormat = enum(u32) {
    ALPHA4 = 0x803B,
    ALPHA8 = 0x803C,
    ALPHA12 = 0x803D,
    ALPHA16 = 0x803E,
    LUMINANCE4 = 0x803F,
    LUMINANCE8 = 0x8040,
    LUMINANCE12 = 0x8041,
    LUMINANCE16 = 0x8042,
    LUMINANCE4_ALPHA4 = 0x8043,
    LUMINANCE6_ALPHA2 = 0x8044,
    LUMINANCE8_ALPHA8 = 0x8045,
    LUMINANCE12_ALPHA4 = 0x8046,
    LUMINANCE12_ALPHA12 = 0x8047,
    LUMINANCE16_ALPHA16 = 0x8048,
    INTENSITY4 = 0x804A,
    INTENSITY8 = 0x804B,
    INTENSITY12 = 0x804C,
    INTENSITY16 = 0x804D,
    RGB2 = 0x804E,
    RGB4 = 0x804F,
    RGB5 = 0x8050,
    RGB8 = 0x8051,
    RGB10 = 0x8052,
    RGB12 = 0x8053,
    RGB16 = 0x8054,
    RGBA2 = 0x8055,
    RGBA4 = 0x8056,
    RGB5_A1 = 0x8057,
    RGBA8 = 0x8058,
    RGB10_A2 = 0x8059,
    RGBA12 = 0x805A,
    RGBA16 = 0x805B,
    R8 = 0x8229,
    R16 = 0x822A,
    RG8 = 0x822B,
    RG16 = 0x822C,
    R16F = 0x822D,
    R32F = 0x822E,
    RG16F = 0x822F,
    RG32F = 0x8230,
    R8I = 0x8231,
    R8UI = 0x8232,
    R16I = 0x8233,
    R16UI = 0x8234,
    R32I = 0x8235,
    R32UI = 0x8236,
    RG8I = 0x8237,
    RG8UI = 0x8238,
    RG16I = 0x8239,
    RG16UI = 0x823A,
    RG32I = 0x823B,
    RG32UI = 0x823C,
    RGBA32F = 0x8814,
    RGB32F = 0x8815,
    RGBA16F = 0x881A,
    RGB16F = 0x881B,
    R11F_G11F_B10F = 0x8C3A,
    UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
    RGB9_E5 = 0x8C3D,
    SRGB8 = 0x8C41,
    SRGB8_ALPHA8 = 0x8C43,
    SLUMINANCE8_ALPHA8 = 0x8C45,
    SLUMINANCE8 = 0x8C47,
    RGB565 = 0x8D62,
    RGBA32UI = 0x8D70,
    RGB32UI = 0x8D71,
    RGBA16UI = 0x8D76,
    RGB16UI = 0x8D77,
    RGBA8UI = 0x8D7C,
    RGB8UI = 0x8D7D,
    RGBA32I = 0x8D82,
    RGB32I = 0x8D83,
    RGBA16I = 0x8D88,
    RGB16I = 0x8D89,
    RGBA8I = 0x8D8E,
    RGB8I = 0x8D8F,
    FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
    R8_SNORM = 0x8F94,
    RG8_SNORM = 0x8F95,
    RGB8_SNORM = 0x8F96,
    RGBA8_SNORM = 0x8F97,
    R16_SNORM = 0x8F98,
    RG16_SNORM = 0x8F99,
    RGB16_SNORM = 0x8F9A,
    RGBA16_SNORM = 0x8F9B,
    ALPHA8_SNORM = 0x9014,
    LUMINANCE8_SNORM = 0x9015,
    LUMINANCE8_ALPHA8_SNORM = 0x9016,
    INTENSITY8_SNORM = 0x9017,
    ALPHA16_SNORM = 0x9018,
    LUMINANCE16_SNORM = 0x9019,
    LUMINANCE16_ALPHA16_SNORM = 0x901A,
    INTENSITY16_SNORM = 0x901B,
    RGB_S3TC_DXT1 = 0x83F0,
    RGBA_S3TC_DXT1 = 0x83F1,
    RGBA_S3TC_DXT3 = 0x83F2,
    RGBA_S3TC_DXT5 = 0x83F3,
    _3DC_X_AMD = 0x87F9,
    _3DC_XY_AMD = 0x87FA,
    ATC_RGBA_INTERPOLATED_ALPHA = 0x87EE,
    SRGB_PVRTC_2BPPV1 = 0x8A54,
    SRGB_PVRTC_4BPPV1 = 0x8A55,
    SRGB_ALPHA_PVRTC_2BPPV1 = 0x8A56,
    SRGB_ALPHA_PVRTC_4BPPV1 = 0x8A57,
    RGB_PVRTC_4BPPV1 = 0x8C00,
    RGB_PVRTC_2BPPV1 = 0x8C01,
    RGBA_PVRTC_4BPPV1 = 0x8C02,
    RGBA_PVRTC_2BPPV1 = 0x8C03,
    SRGB_S3TC_DXT1 = 0x8C4C,
    SRGB_ALPHA_S3TC_DXT1 = 0x8C4D,
    SRGB_ALPHA_S3TC_DXT3 = 0x8C4E,
    SRGB_ALPHA_S3TC_DXT5 = 0x8C4F,
    LUMINANCE_LATC1 = 0x8C70,
    SIGNED_LUMINANCE_LATC1 = 0x8C71,
    LUMINANCE_ALPHA_LATC2 = 0x8C72,
    SIGNED_LUMINANCE_ALPHA_LATC2 = 0x8C73,
    ATC_RGB = 0x8C92,
    ATC_RGBA_EXPLICIT_ALPHA = 0x8C93,
    RED_RGTC1 = 0x8DBB,
    SIGNED_RED_RGTC1 = 0x8DBC,
    RED_GREEN_RGTC2 = 0x8DBD,
    SIGNED_RED_GREEN_RGTC2 = 0x8DBE,
    ETC1_RGB8_OES = 0x8D64,
    RGBA_BPTC_UNORM = 0x8E8C,
    SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
    RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
    RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
    R11_EAC = 0x9270,
    SIGNED_R11_EAC = 0x9271,
    RG11_EAC = 0x9272,
    SIGNED_RG11_EAC = 0x9273,
    RGB8_ETC2 = 0x9274,
    SRGB8_ETC2 = 0x9275,
    RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
    SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
    RGBA8_ETC2_EAC = 0x9278,
    SRGB8_ALPHA8_ETC2_EAC = 0x9279,
    SRGB_ALPHA_PVRTC_2BPPV2 = 0x93F0,
    SRGB_ALPHA_PVRTC_4BPPV2 = 0x93F1,
    RGBA_ASTC_4x4 = 0x93B0,
    RGBA_ASTC_5x4 = 0x93B1,
    RGBA_ASTC_5x5 = 0x93B2,
    RGBA_ASTC_6x5 = 0x93B3,
    RGBA_ASTC_6x6 = 0x93B4,
    RGBA_ASTC_8x5 = 0x93B5,
    RGBA_ASTC_8x6 = 0x93B6,
    RGBA_ASTC_8x8 = 0x93B7,
    RGBA_ASTC_10x5 = 0x93B8,
    RGBA_ASTC_10x6 = 0x93B9,
    RGBA_ASTC_10x8 = 0x93BA,
    RGBA_ASTC_10x10 = 0x93BB,
    RGBA_ASTC_12x10 = 0x93BC,
    RGBA_ASTC_12x12 = 0x93BD,
    SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
    SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
    SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
    SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
    SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
    SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
    SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
    SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
    SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
    SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
    SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
    SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
    SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
    SRGB8_ALPHA8_ASTC_12x12 = 0x93DD,
};

pub const Format = struct {
    gltype: Type,
    format: GlFormat,
    intformat: IntFormat,
};

pub fn From(fmt: tif.Format) ?Format {
    switch (fmt) {
        .R4G4_UNORM => return Format{ .format = .RG, .gltype = .UNSIGNED_SHORT_4_4_4_4, .intformat = .RGB4 },

        .R4G4B4A4_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_SHORT_4_4_4_4, .intformat = .RGB4 },
        .B4G4R4A4_UNORM => return Format{ .format = .BGRA, .gltype = .UNSIGNED_SHORT_4_4_4_4_REV, .intformat = .RGB4 },

        .R5G6B5_UNORM => return Format{ .format = .RGB, .gltype = .UNSIGNED_SHORT_5_6_5, .intformat = .RGB565 },
        .B5G6R5_UNORM => return Format{ .format = .BGR, .gltype = .UNSIGNED_SHORT_5_6_5_REV, .intformat = .RGB565 },

        .R5G5B5A1_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_SHORT_5_5_5_1, .intformat = .RGB5_A1 },
        .A1R5G5B5_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_SHORT_5_5_5_1_REV, .intformat = .RGB5_A1 },
        .B5G5G5A1_UNORM => return Format{ .format = .BGRA, .gltype = .UNSIGNED_SHORT_5_5_5_1, .intformat = .RGB5_A1 },

        .A2R10G10B10_UNORM => return Format{ .format = .BGRA, .gltype = .UNSIGNED_INT_2_10_10_10_REV, .intformat = .RGB10_A2 },
        .A2R10G10B10_UINT => return Format{ .format = .BGRA_INTEGER, .gltype = .UNSIGNED_INT_2_10_10_10_REV, .intformat = .RGB10_A2 },
        .A2B10G10R10_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_INT_2_10_10_10_REV, .intformat = .RGB10_A2 },
        .A2B10G10R10_UNORM => return Format{ .format = .RGBA_INTEGER, .gltype = .UNSIGNED_INT_2_10_10_10_REV, .intformat = .RGB10_A2 },

        .R8_UNORM => return Format{ .format = .RED, .gltype = .UNSIGNED_BYTE, .intformat = .R8 },
        .R8_SNORM => return Format{ .format = .RED, .gltype = .BYTE, .intformat = .R8_SNORM },
        .R8_UINT => return Format{ .format = .RED_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .R8UI },
        .R8_SINT => return Format{ .format = .RED_INTEGER, .gltype = .BYTE, .intformat = .R8I },
        .R8_SRGB => return Format{ .format = .SLUMINANCE, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .R8G8_UNORM => return Format{ .format = .RG, .gltype = .UNSIGNED_BYTE, .intformat = .RG8 },
        .R8G8_SNORM => return Format{ .format = .RG, .gltype = .BYTE, .intformat = .RG8_SNORM },
        .R8G8_UINT => return Format{ .format = .RG_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RG8UI },
        .R8G8_SINT => return Format{ .format = .RG_INTEGER, .gltype = .BYTE, .intformat = .RG8I },
        .R8G8_SRGB => return Format{ .format = .SLUMINANCE_ALPHA, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .R8G8B8_UNORM => return Format{ .format = .RGB, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8 },
        .R8G8B8_SNORM => return Format{ .format = .RGB, .gltype = .BYTE, .intformat = .RGB8_SNORM },
        .R8G8B8_UINT => return Format{ .format = .RGB_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8UI },
        .R8G8B8_SINT => return Format{ .format = .RGB_INTEGER, .gltype = .BYTE, .intformat = .RGB8I },
        .R8G8B8_SRGB => return Format{ .format = .RGB, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .B8G8R8_UNORM => return Format{ .format = .BGR, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8 },
        .B8G8R8_SNORM => return Format{ .format = .BGR, .gltype = .BYTE, .intformat = .RGB8_SNORM },
        .B8G8R8_UINT => return Format{ .format = .BGR_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8UI },
        .B8G8R8_SINT => return Format{ .format = .BGR_INTEGER, .gltype = .BYTE, .intformat = .RGB8I },
        .B8G8R8_SRGB => return Format{ .format = .BGR, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .R8G8B8A8_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_BYTE, .intformat = .RGBA8 },
        .R8G8B8A8_SNORM => return Format{ .format = .RGBA, .gltype = .BYTE, .intformat = .RGBA8_SNORM },
        .R8G8B8A8_UINT => return Format{ .format = .RGBA_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RGBA8UI },
        .R8G8B8A8_SINT => return Format{ .format = .RGBA_INTEGER, .gltype = .BYTE, .intformat = .RGBA8I },
        .R8G8B8A8_SRGB => return Format{ .format = .RGBA, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .B8G8R8A8_UNORM => return Format{ .format = .BGRA, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8 },
        .B8G8R8A8_SNORM => return Format{ .format = .BGRA, .gltype = .BYTE, .intformat = .RGB8_SNORM },
        .B8G8R8A8_UINT => return Format{ .format = .BGRA_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8UI },
        .B8G8R8A8_SINT => return Format{ .format = .BGRA_INTEGER, .gltype = .BYTE, .intformat = .RGB8I },
        .B8G8R8A8_SRGB => return Format{ .format = .BGRA, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .A8B8G8R8A8_UNORM => return Format{ .format = .ABGR, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8 },
        .A8B8G8R8A8_SNORM => return Format{ .format = .ABGR, .gltype = .BYTE, .intformat = .RGB8_SNORM },
        .A8B8G8R8A8_UINT => return Format{ .format = .ABGR_INTEGER, .gltype = .UNSIGNED_BYTE, .intformat = .RGB8UI },
        .A8B8G8R8A8_SINT => return Format{ .format = .ABGR_INTEGER, .gltype = .BYTE, .intformat = .RGB8I },
        .A8B8G8R8A8_SRGB => return Format{ .format = .ABGR, .gltype = .UNSIGNED_BYTE, .intformat = .SRGB8 },

        .E5_UINT_B9G9R9_UFLOAT => return Format{ .format = .BGR, .gltype = .UNSIGNED_INT_5_9_9_9_REV, .intformat = .RGB9_E5 },
        .B10G11R11_UFLOAT => return Format{ .format = .BGR, .gltype = .UNSIGNED_INT_10F_11F_11F_REV, .intformat = .R11F_G11F_B10F },

        .R16_UNORM => return Format{ .format = .RED, .gltype = .UNSIGNED_SHORT, .intformat = .R16 },
        .R16_SNORM => return Format{ .format = .RED, .gltype = .SHORT, .intformat = .R16_SNORM },
        .R16_UINT => return Format{ .format = .RED_INTEGER, .gltype = .UNSIGNED_SHORT, .intformat = .R16UI },
        .R16_SINT => return Format{ .format = .RED_INTEGER, .gltype = .SHORT, .intformat = .R16I },
        .R16_SFLOAT => return Format{ .format = .RED, .gltype = .HALF_FLOAT, .intformat = .R16F },

        .R16G16_UNORM => return Format{ .format = .RG, .gltype = .UNSIGNED_SHORT, .intformat = .RG16 },
        .R16G16_SNORM => return Format{ .format = .RG, .gltype = .SHORT, .intformat = .RG16_SNORM },
        .R16G16_UINT => return Format{ .format = .RG_INTEGER, .gltype = .UNSIGNED_SHORT, .intformat = .RG16UI },
        .R16G16_SINT => return Format{ .format = .RG_INTEGER, .gltype = .SHORT, .intformat = .RG16I },
        .R16G16_SFLOAT => return Format{ .format = .RG, .gltype = .HALF_FLOAT, .intformat = .RG16F },

        .R16G16B16_UNORM => return Format{ .format = .RGB, .gltype = .UNSIGNED_SHORT, .intformat = .RGB16 },
        .R16G16B16_SNORM => return Format{ .format = .RGB, .gltype = .SHORT, .intformat = .RGB16_SNORM },
        .R16G16B16_UINT => return Format{ .format = .RGB_INTEGER, .gltype = .UNSIGNED_SHORT, .intformat = .RGB16UI },
        .R16G16B16_SINT => return Format{ .format = .RGB_INTEGER, .gltype = .SHORT, .intformat = .RGB16I },
        .R16G16B16_SFLOAT => return Format{ .format = .RGB, .gltype = .HALF_FLOAT, .intformat = .RGB16F },

        .R16G16B16A16_UNORM => return Format{ .format = .RGBA, .gltype = .UNSIGNED_SHORT, .intformat = .RGBA16 },
        .R16G16B16A16_SNORM => return Format{ .format = .RGBA, .gltype = .SHORT, .intformat = .RGBA16_SNORM },
        .R16G16B16A16_UINT => return Format{ .format = .RGBA_INTEGER, .gltype = .UNSIGNED_SHORT, .intformat = .RGBA16UI },
        .R16G16B16A16_SINT => return Format{ .format = .RGBA_INTEGER, .gltype = .SHORT, .intformat = .RGBA16I },
        .R16G16B16A16_SFLOAT => return Format{ .format = .RGBA, .gltype = .HALF_FLOAT, .intformat = .RGBA16F },

        .R32_UINT => return Format{ .format = .RED_INTEGER, .gltype = .UNSIGNED_INT, .intformat = .R32UI },
        .R32_SINT => return Format{ .format = .RED_INTEGER, .gltype = .INT, .intformat = .R32I },
        .R32_SFLOAT => return Format{ .format = .RED, .gltype = .FLOAT, .intformat = .R32F },

        .R32G32_UINT => return Format{ .format = .RG_INTEGER, .gltype = .UNSIGNED_INT, .intformat = .RG32UI },
        .R32G32_SINT => return Format{ .format = .RG_INTEGER, .gltype = .INT, .intformat = .RG32I },
        .R32G32_SFLOAT => return Format{ .format = .RG, .gltype = .FLOAT, .intformat = .RG32F },

        .R32G32B32_UINT => return Format{ .format = .RGB_INTEGER, .gltype = .UNSIGNED_INT, .intformat = .RGB32UI },
        .R32G32B32_SINT => return Format{ .format = .RGB_INTEGER, .gltype = .INT, .intformat = .RGB32I },
        .R32G32B32_SFLOAT => return Format{ .format = .RGB, .gltype = .FLOAT, .intformat = .RGB32F },

        .R32G32B32A32_UINT => return Format{ .format = .RGBA_INTEGER, .gltype = .UNSIGNED_INT, .intformat = .RGBA32UI },
        .R32G32B32A32_SINT => return Format{ .format = .RGBA_INTEGER, .gltype = .INT, .intformat = .RGBA32I },
        .R32G32B32A32_SFLOAT => return Format{ .format = .RGBA, .gltype = .FLOAT, .intformat = .RGBA32F },

        .DXBC1_RGB_UNORM => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB_S3TC_DXT1 },
        .DXBC1_RGB_SRGB => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .SRGB_S3TC_DXT1 },
        .DXBC1_RGBA_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_S3TC_DXT1 },
        .DXBC1_RGBA_SRGB => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .SRGB_ALPHA_S3TC_DXT1 },
        .DXBC2_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_S3TC_DXT3 },
        .DXBC2_SRGB => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .SRGB_ALPHA_S3TC_DXT3 },
        .DXBC3_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_S3TC_DXT5 },
        .DXBC3_SRGB => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .SRGB_ALPHA_S3TC_DXT5 },
        .DXBC4_UNORM => return Format{ .format = .RED, .gltype = .COMPRESSED, .intformat = .RED_RGTC1 },
        .DXBC4_SNORM => return Format{ .format = .RED, .gltype = .COMPRESSED, .intformat = .SIGNED_RED_RGTC1 },
        .DXBC5_UNORM => return Format{ .format = .RG, .gltype = .COMPRESSED, .intformat = .RED_GREEN_RGTC2 },
        .DXBC5_SNORM => return Format{ .format = .RG, .gltype = .COMPRESSED, .intformat = .SIGNED_RED_GREEN_RGTC2 },
        .DXBC6H_UFLOAT => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB_BPTC_UNSIGNED_FLOAT },
        .DXBC6H_SFLOAT => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB_BPTC_SIGNED_FLOAT },
        .DXBC7_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_BPTC_UNORM },
        .DXBC7_SRGB => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .SRGB_ALPHA_BPTC_UNORM },

        .PVRTC1_2BPP_UNORM => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB_PVRTC_2BPPV1 },
        .PVRTC1_2BPPA_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_PVRTC_2BPPV1 },
        .PVRTC1_4BPP_UNORM => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB_PVRTC_4BPPV1 },
        .PVRTC1_4BPPA_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_PVRTC_4BPPV1 },
        .PVRTC1_2BPP_SRGB => return Format{ .format = .SRGB, .gltype = .COMPRESSED, .intformat = .SRGB_PVRTC_2BPPV1 },
        .PVRTC1_2BPPA_SRGB => return Format{ .format = .SRGB_ALPHA, .gltype = .COMPRESSED, .intformat = .SRGBA_PVRTC_2BPPV1 },
        .PVRTC1_4BPP_SRGB => return Format{ .format = .SRGB, .gltype = .COMPRESSED, .intformat = .SRGB_PVRTC_4BPPV1 },
        .PVRTC1_4BPPA_SRGB => return Format{ .format = .SRGB_ALPHA, .gltype = .COMPRESSED, .intformat = .SRGBA_PVRTC_4BPPV1 },

        .ETC2_R8G8B8_UNORM => return Format{ .format = .RGB, .gltype = .COMPRESSED, .intformat = .RGB8_ETC2 },
        .ETC2_R8G8B8A1_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGB8_PUNCHTHROUGH_ALPHA1_ETC2 },
        .ETC2_R8G8B8A8_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGB8_ALPHA8_ETC2 },
        .ETC2_R8G8B8_SRGB => return Format{ .format = .SRGB, .gltype = .COMPRESSED, .intformat = .SRGB8_ETC2 },
        .ETC2_R8G8B8A1_SRGB => return Format{ .format = .SRGB_ALPHA, .gltype = .COMPRESSED, .intformat = .SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 },
        .ETC2_R8G8B8A8_SRGB => return Format{ .format = .SRGB_ALPHA, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ETC2 },

        .ASTC_4x4_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_4x4 },
        .ASTC_4x4_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_4x4 },
        .ASTC_5x4_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_5x4 },
        .ASTC_5x4_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_5x4 },
        .ASTC_5x5_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_5x5 },
        .ASTC_5x5_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_5x5 },
        .ASTC_6x5_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_6x5 },
        .ASTC_6x5_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_6x5 },
        .ASTC_6x6_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_6x6 },
        .ASTC_6x6_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_6x6 },
        .ASTC_8x5_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_8x5 },
        .ASTC_8x5_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_8x5 },
        .ASTC_8x6_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_8x6 },
        .ASTC_8x6_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_8x6 },
        .ASTC_8x8_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_8x8 },
        .ASTC_8x8_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_8x8 },
        .ASTC_10x5_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_10x5 },
        .ASTC_10x5_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_10x5 },
        .ASTC_10x6_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_10x6 },
        .ASTC_10x6_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_10x6 },
        .ASTC_10x8_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_10x8 },
        .ASTC_10x8_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_10x8 },
        .ASTC_10x10_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_10x10 },
        .ASTC_10x10_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_10x10 },
        .ASTC_12x10_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_12x10 },
        .ASTC_12x10_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_12x10 },
        .ASTC_12x12_UNORM => return Format{ .format = .RGBA, .gltype = .COMPRESSED, .intformat = .RGBA_ASTC_12x12 },
        .ASTC_12x12_SRGB => return Format{ .format = .SRGB8_ALPHA8, .gltype = .COMPRESSED, .intformat = .SRGB8_ALPHA8_ASTC_12x12 },

        else => return null,
    }
}

pub fn FromGl(fmt: Format) tif.Format {
    std.log.warn("{any}", .{fmt});
    switch (fmt.intformat) {
        .RGB_S3TC_DXT1 => return .DXBC1_RGB_UNORM,
        .RGBA_S3TC_DXT1 => return .DXBC1_RGBA_UNORM,
        .RGBA_S3TC_DXT3 => return .DXBC2_UNORM,
        .RGBA_S3TC_DXT5 => return .DXBC3_UNORM,
        ._3DC_X_AMD => return .DXBC4_UNORM,
        ._3DC_XY_AMD => return .DXBC5_UNORM,
        .SRGB_PVRTC_2BPPV1 => return .PVRTC1_2BPP_SRGB,
        //        .SRGB_PVRTC_4BPPV1 => return .PVRTC1_2BPPA_SRGB,
        //        .SRGB_ALPHA_PVRTC_2BPPV1 => return .PVRTC1_2BPPA_SRGB,
        //        .SRGB_ALPHA_PVRTC_4BPPV1 => return .PVRTC1_4BPPA_SRGB,
        .RGB_PVRTC_4BPPV1 => return .PVRTC1_4BPP_UNORM,
        .RGB_PVRTC_2BPPV1 => return .PVRTC1_2BPP_UNORM,
        //        .RGBA_PVRTC_4BPPV1 => return .PVRTC1_4BPPA_UNORM,
        //        .RGBA_PVRTC_2BPPV1 => return .PVRTC1_2BPPA_UNORM,
        .SRGB_S3TC_DXT1 => return .DXBC1_RGB_SRGB,
        .SRGB_ALPHA_S3TC_DXT1 => return .DXBC1_RGBA_SRGB,
        .SRGB_ALPHA_S3TC_DXT3 => return .DXBC2_SRGB,
        .SRGB_ALPHA_S3TC_DXT5 => return .DXBC3_SRGB,
        .LUMINANCE_LATC1 => return .DXBC4_UNORM,
        .SIGNED_LUMINANCE_LATC1 => return .DXBC4_SNORM,
        .LUMINANCE_ALPHA_LATC2 => return .DXBC5_UNORM,
        .SIGNED_LUMINANCE_ALPHA_LATC2 => return .DXBC5_SNORM,
        .RED_RGTC1 => return .DXBC4_UNORM,
        .SIGNED_RED_RGTC1 => return .DXBC4_SNORM,
        .RED_GREEN_RGTC2 => return .DXBC5_UNORM,
        .SIGNED_RED_GREEN_RGTC2 => return .DXBC5_SNORM,
        .ETC1_RGB8_OES => return .ETC2_R8G8B8_UNORM,
        .RGBA_BPTC_UNORM => return .DXBC7_UNORM,
        .SRGB_ALPHA_BPTC_UNORM => return .DXBC7_SRGB,
        .RGB_BPTC_SIGNED_FLOAT => return .DXBC6H_SFLOAT,
        .RGB_BPTC_UNSIGNED_FLOAT => return .DXBC6H_UFLOAT,
        .R11_EAC => return .ETC2_EAC_R11_UNORM,
        .SIGNED_R11_EAC => return .ETC2_EAC_R11_SNORM,
        .RG11_EAC => return .ETC2_EAC_R11G11_UNORM,
        .SIGNED_RG11_EAC => return .ETC2_EAC_R11G11_UNORM,
        .RGB8_ETC2 => return .ETC2_R8G8B8_UNORM,
        .SRGB8_ETC2 => return .ETC2_R8G8B8_SRGB,
        .RGB8_PUNCHTHROUGH_ALPHA1_ETC2 => return .ETC2_R8G8B8A1_UNORM,
        .SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 => return .ETC2_R8G8B8A1_SRGB,
        .RGBA8_ETC2_EAC => return .ETC2_R8G8B8A8_UNORM,
        .SRGB8_ALPHA8_ETC2_EAC => return .ETC2_R8G8B8A8_SRGB,
        .RGBA_ASTC_4x4 => return .ASTC_4x4_UNORM,
        .RGBA_ASTC_5x4 => return .ASTC_5x4_UNORM,
        .RGBA_ASTC_5x5 => return .ASTC_5x5_UNORM,
        .RGBA_ASTC_6x5 => return .ASTC_6x5_UNORM,
        .RGBA_ASTC_6x6 => return .ASTC_6x6_UNORM,
        .RGBA_ASTC_8x5 => return .ASTC_8x5_UNORM,
        //        .RGBA_ASTC_8x6 => return .ASTC_8x6_UNORM,
        .RGBA_ASTC_8x8 => return .ASTC_8x8_UNORM,
        .RGBA_ASTC_10x5 => return .ASTC_10x5_UNORM,
        .RGBA_ASTC_10x6 => return .ASTC_10x6_UNORM,
        .RGBA_ASTC_10x8 => return .ASTC_10x8_UNORM,
        .RGBA_ASTC_10x10 => return .ASTC_10x10_UNORM,
        .RGBA_ASTC_12x10 => return .ASTC_12x10_UNORM,
        .RGBA_ASTC_12x12 => return .ASTC_12x12_UNORM,
        .SRGB8_ALPHA8_ASTC_4x4 => return .ASTC_4x4_SRGB,
        .SRGB8_ALPHA8_ASTC_5x4 => return .ASTC_5x4_SRGB,
        .SRGB8_ALPHA8_ASTC_5x5 => return .ASTC_5x5_SRGB,
        .SRGB8_ALPHA8_ASTC_6x5 => return .ASTC_6x5_SRGB,
        .SRGB8_ALPHA8_ASTC_6x6 => return .ASTC_6x6_SRGB,
        .SRGB8_ALPHA8_ASTC_8x5 => return .ASTC_8x5_SRGB,
        //        .SRGB8_ALPHA8_ASTC_8x6 => return .ASTC_8x6_SRGB,
        .SRGB8_ALPHA8_ASTC_8x8 => return .ASTC_8x8_SRGB,
        .SRGB8_ALPHA8_ASTC_10x5 => return .ASTC_10x5_SRGB,
        .SRGB8_ALPHA8_ASTC_10x6 => return .ASTC_10x6_SRGB,
        .SRGB8_ALPHA8_ASTC_10x8 => return .ASTC_10x8_SRGB,
        .SRGB8_ALPHA8_ASTC_10x10 => return .ASTC_10x10_SRGB,
        .SRGB8_ALPHA8_ASTC_12x10 => return .ASTC_12x10_SRGB,
        .SRGB8_ALPHA8_ASTC_12x12 => return .ASTC_12x12_SRGB,
        .RGB4 => return .R4G4_UNORM,
        .RGBA4 => switch (fmt.format) {
            .RGB => return .R4G4B4A4_UNORM,
            .BGR => return .B4G4R4A4_UNORM,
            else => {},
        },
        .RGB565 => {
            if (fmt.gltype == .UNSIGNED_SHORT_5_6_5 or fmt.format == .BGR) return .B5G6R5_UNORM else return .R5G6B5_UNORM;
        },
        .RGB5_A1 => {
            if (fmt.gltype == .UNSIGNED_SHORT_1_5_5_5_REV) return .A1R5G5B5_UNORM else if (fmt.gltype == .UNSIGNED_SHORT_5_5_5_1) {
                if (fmt.format == .BGRA) return .A1R5G5B5_UNORM else return .A1R5G5B5_UNORM;
            }
        },
        .R8 => return .R8_UNORM,
        .RG8 => return .R8G8_UNORM,
        .RGB8 => switch (fmt.format) {
            .RGB => return .R8G8B8_UNORM,
            .BGR => return .B8G8R8_UNORM,
            else => {},
        },
        .RGBA8 => switch (fmt.format) {
            .RGBA => return .R8G8B8A8_UNORM,
            .BGRA => return .B8G8R8A8_UNORM,
            //            .ABGR => return .A8B8G8R8_UNORM,
            else => {},
        },
        .R8_SNORM => return .R8_SNORM,
        .RG8_SNORM => return .R8G8_SNORM,
        .RGB8_SNORM => switch (fmt.format) {
            .RGB => return .R8G8B8_SNORM,
            .BGR => return .B8G8R8_SNORM,
            else => {},
        },
        .RGBA8_SNORM => switch (fmt.format) {
            .RGBA => return .R8G8B8A8_SNORM,
            .BGRA => return .B8G8R8A8_SNORM,
            //            .ABGR => return .A8B8G8R8_SNORM,
            else => {},
        },
        .RGB10_A2 => switch (fmt.format) {
            .RGBA => return .A2R10G10B10_UNORM,
            .BGRA => return .A2B10G10R10_UNORM,
            .RGBA_INTEGER => return .A2R10G10B10_UINT,
            .BGRA_INTEGER => return .A2B10G10R10_UINT,
            else => {},
        },
        .R16 => return .R16_UNORM,
        .RG16 => return .R16G16_UNORM,
        .RGB16 => return .R16G16B16_UNORM,
        .RGBA16 => return .R16G16B16A16_UNORM,
        .R16_SNORM => return .R16_SNORM,
        .RG16_SNORM => return .R16G16_SNORM,
        .RGB16_SNORM => return .R16G16_SNORM,
        .RGBA16_SNORM => return .R16G16B16_SNORM,

        .R8I => return .R8_SINT,
        .RG8I => return .R8G8_SINT,
        .RGB8I => switch (fmt.format) {
            .RGB => return .R8G8B8_UINT,
            .BGR => return .B8G8R8_UINT,
            else => {},
        },
        .RGBA8I => switch (fmt.format) {
            .RGBA => return .R8G8B8A8_SINT,
            .BGRA => return .B8G8R8A8_SINT,
            //            .ABGR => return .A8B8G8R8_SNORM,
            else => {},
        },
        .R16I => return .R16_SINT,
        .RG16I => return .R16G16_SINT,
        .RGB16I => return .R16G16B16_SINT,
        .RGBA16I => return .R16G16B16A16_SINT,
        .R32I => return .R32_SINT,
        .RG32I => return .R32G32_SINT,
        .RGB32I => return .R32G32B32_SINT,
        .RGBA32I => return .R32G32B32A32_SINT,
        .R8UI => return .R8_SINT,
        .RG8UI => return .R8G8_SINT,
        .RGB8UI => switch (fmt.format) {
            .RGB => return .R8G8B8_UINT,
            .BGR => return .B8G8R8_UINT,
            else => {},
        },
        .RGBA8UI => switch (fmt.format) {
            .RGBA => return .R8G8B8A8_UINT,
            .BGRA => return .B8G8R8A8_UINT,
            //            .ABGR => return .A8B8G8R8_SNORM,
            else => {},
        },
        .R16UI => return .R16_UINT,
        .RG16UI => return .R16G16_UINT,
        .RGB16UI => return .R16G16B16_UINT,
        .RGBA16UI => return .R16G16B16A16_UINT,
        .R32UI => return .R32_UINT,
        .RG32UI => return .R32G32_UINT,
        .RGB32UI => return .R32G32B32_UINT,
        .RGBA32UI => return .R32G32B32A32_UINT,
        .R16F => return .R16_SFLOAT,
        .RG16F => return .R16G16_SFLOAT,
        .RGB16F => return .R16G16B16_SFLOAT,
        .RGBA16F => return .R16G16B16_SFLOAT,
        .R32F => return .R32_SFLOAT,
        .RG32F => return .R32G32_SFLOAT,
        .RGB32F => return .R32G32B32_SFLOAT,
        .RGBA32F => return .R32G32B32A32_SFLOAT,

        .SLUMINANCE8 => return .R8_SRGB,
        .SRGB8 => switch (fmt.format) {
            .RGB => return .R8G8B8_SRGB,
            .BGR => return .B8G8R8_SRGB,
            else => {},
        },
        .SLUMINANCE8_ALPHA8 => return .R8G8_SRGB,
        .SRGB8_ALPHA8 => switch (fmt.format) {
            .RGBA => return .R8G8B8A8_SRGB,
            .BGRA => return .B8G8R8A8_SRGB,
            //            .ABGR => return .A8B8G8R8_SRGB,
            else => {},
        },
        .R11F_G11F_B10F => return .B10G11R11_UFLOAT, //??
        .UNSIGNED_INT_10F_11F_11F_REV => return .B10G11R11_UFLOAT, //?
        .RGB9_E5 => return .E5_UINT_B9G9R9_UFLOAT,
        .ALPHA8 => return .R8_UNORM,
        .ALPHA16 => return .R16_UNORM,
        .LUMINANCE8 => return .R8_UNORM,
        .LUMINANCE16 => return .R16_UNORM,
        .LUMINANCE8_ALPHA8 => return .R8G8_UNORM,
        .LUMINANCE16_ALPHA16 => return .R16G16_UNORM,
        .INTENSITY8 => return .R8_UNORM,
        .INTENSITY16 => return .R16_UNORM,
        .ALPHA8_SNORM => return .R8_SNORM,
        .LUMINANCE8_SNORM => return .R8_SNORM,
        .LUMINANCE8_ALPHA8_SNORM => return .R8G8_SNORM,
        .INTENSITY8_SNORM => return .R8_SNORM,
        .ALPHA16_SNORM => return .R16_SNORM,
        .LUMINANCE16_SNORM => return .R16_SNORM,
        .LUMINANCE16_ALPHA16_SNORM => return .R16G16_SNORM,
        .INTENSITY16_SNORM => return .R16_SNORM,

        else => {
            // sometimes files have FORMAT in the internal format field
            switch (@as(GlFormat, fmt.format)) {
                .RED => switch (fmt.gltype) {
                    .BYTE => return .R8_SNORM,
                    .UNSIGNED_BYTE => return .R8_UNORM,
                    .SHORT => return .R16_SNORM,
                    .UNSIGNED_SHORT => return .R16_UNORM,
                    .INT => return .R32_SINT,
                    .UNSIGNED_INT => return .R32_UINT,
                    .FLOAT => return .R32_SFLOAT,
                    .HALF_FLOAT => return .R16_SFLOAT,
                    else => {},
                },
                .RG => switch (fmt.gltype) {
                    .BYTE => return .R8G8_SNORM,
                    .UNSIGNED_BYTE => return .R8G8_UNORM,
                    .SHORT => return .R16G16_SNORM,
                    .UNSIGNED_SHORT => return .R16G16_UNORM,
                    .INT => return .R32G32_SINT,
                    .UNSIGNED_INT => return .R32G32_UINT,
                    .FLOAT => return .R32G32_SFLOAT,
                    .HALF_FLOAT => return .R16G16_SFLOAT,
                    else => {},
                },
                .RGB => switch (fmt.gltype) {
                    .BYTE => return .R8G8B8_SNORM,
                    .UNSIGNED_BYTE => return .R8G8B8_UNORM,
                    .SHORT => return .R16G16B16_SNORM,
                    .UNSIGNED_SHORT => return .R16G16B16_UNORM,
                    .INT => return .R32G32B32_SINT,
                    .UNSIGNED_INT => return .R32G32B32_UINT,
                    .FLOAT => return .R32G32B32_SFLOAT,
                    .HALF_FLOAT => return .R16G16B16_SFLOAT,
                    else => {},
                },
                .RGBA => switch (fmt.gltype) {
                    .BYTE => return .R8G8B8A8_SNORM,
                    .UNSIGNED_BYTE => return .R8G8B8A8_UNORM,
                    .SHORT => return .R16G16B16A16_SNORM,
                    .UNSIGNED_SHORT => return .R16G16B16A16_UNORM,
                    .INT => return .R32G32B32A32_SINT,
                    .UNSIGNED_INT => return .R32G32B32A32_UINT,
                    .FLOAT => return .R32G32B32A32_SFLOAT,
                    .HALF_FLOAT => return .R16G16B16A16_SFLOAT,
                    else => {},
                },

                else => {},
            }
        },
    }
    return .UNDEFINED;
}
